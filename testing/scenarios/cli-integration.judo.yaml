---
name: CLI Integration Tests
description: Test CLI integration with a real CDKTF project

setup:
  - mkdir -p "{{test_dir}}/integration-test"
  - cd "{{test_dir}}/integration-test"
  - |
    # Create a minimal CDKTF project structure
    mkdir -p src
    echo 'import { Construct } from "constructs";
    import { App, TerraformStack } from "cdktf";
    import { AwsProvider } from "@cdktf/provider-aws";

    class MyStack extends TerraformStack {
      constructor(scope: Construct, name: string) {
        super(scope, name);
        new AwsProvider(this, "aws", {
          region: "us-west-2"
        });
      }
    }

    const app = new App();
    new MyStack(app, "test-stack");
    app.synth();' > src/main.ts
  - |
    echo '{
      "name": "test-project",
      "description": "Test project for CLI integration",
      "version": "0.1.0",
      "cdktf": {
        "version": "0.20.0"
      }
    }' > package.json
  - |
    echo '{
      "compilerOptions": {
        "target": "ES2020",
        "module": "commonjs",
        "lib": ["ES2020"],
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "outDir": "dist"
      },
      "include": ["src/**/*"]
    }' > tsconfig.json

run:
  # Test init with existing project
  init_existing_project:
    command: "{{cli_path}} init --working-dir ."
    expectCode: 0
    outputContains:
      - "Initializing CDKTF project"
    outputDoesntContain:
      - "Error:"

  # Test synth with the project
  synth_project:
    command: "{{cli_path}} synth --working-dir ."
    expectCode: 0
    outputContains:
      - "Synthesizing CDKTF application"
    outputDoesntContain:
      - "Error:"

  # Test list with the project
  list_project:
    command: "{{cli_path}} list --working-dir ."
    expectCode: 0
    outputContains:
      - "Stacks:"
    outputDoesntContain:
      - "Error:"

  # Test plan with the project (should work but show no changes)
  plan_project:
    command: "{{cli_path}} plan --working-dir ."
    expectCode: 0
    outputContains:
      - "Generating deployment plan"
    outputDoesntContain:
      - "Error:"

  # Test scan with the project
  scan_project:
    command: "{{cli_path}} scan --working-dir ."
    expectCode: 0
    outputContains:
      - "Scanning project"
    outputDoesntContain:
      - "Error:"

  # Test validate with the project
  validate_project:
    command: "{{cli_path}} validate --working-dir ."
    expectCode: 0
    outputContains:
      - "Validating project"
    outputDoesntContain:
      - "Error:"

  # Test with verbose output
  verbose_output:
    command: "{{cli_path}} list --working-dir . --verbose"
    expectCode: 0
    outputContains:
      - "Stacks:"
      - "DEBUG"
    outputDoesntContain:
      - "Error:"

teardown:
  - rm -rf "{{test_dir}}/integration-test"
